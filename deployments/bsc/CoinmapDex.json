{
  "address": "0xa7e44aE03307de5192944520251e95e89A56A953",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum CoinmapDex.OrderStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "UpdateStatus",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ORDER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "payAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CoinmapDex.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address[]",
          "name": "paths",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "feePaths",
          "type": "address[]"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "payAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CoinmapDex.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "hashOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "isValidSigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "makerSaltUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "onCriticalBug",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "setFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "payAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CoinmapDex.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0bb7e2ad31dbc3e6d1df2b998bd7cab61baae25efffe50578fb7dbb8fab71199",
  "receipt": {
    "to": null,
    "from": "0x974C026Cc5D9F69926a59181B6BDa1b090ff49fC",
    "contractAddress": "0xa7e44aE03307de5192944520251e95e89A56A953",
    "transactionIndex": 16,
    "gasUsed": "1695593",
    "logsBloom": "0x
    "blockHash": "0x73ec729dda79a870e021f2ceda88d7dd608a593b3375ce6d99a18c50b9622d69",
    "transactionHash": "0x0bb7e2ad31dbc3e6d1df2b998bd7cab61baae25efffe50578fb7dbb8fab71199",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 16669431,
        "transactionHash": "0x0bb7e2ad31dbc3e6d1df2b998bd7cab61baae25efffe50578fb7dbb8fab71199",
        "address": "0xa7e44aE03307de5192944520251e95e89A56A953",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000974c026cc5d9f69926a59181b6bda1b090ff49fc"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0x73ec729dda79a870e021f2ceda88d7dd608a593b3375ce6d99a18c50b9622d69"
      }
    ],
    "blockNumber": 16669431,
    "cumulativeGasUsed": "3082762",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x10ED43C718714eb63d5aA57B78B54704E256024E",
    "0x974C026Cc5D9F69926a59181B6BDa1b090ff49fC",
    25
  ],
  "solcInputHash": "6fb0eed684fed940a36a814aff03af37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum CoinmapDex.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"UpdateStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct CoinmapDex.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"feePaths\",\"type\":\"address[]\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct CoinmapDex.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"makerSaltUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"onCriticalBug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct CoinmapDex.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_feeRate\":\": fee rate (100 = 1%, 500 = 5%, 5 = 0.05%)\",\"_feeTo\":\": address to collect fee\",\"_swapRouter\":\": pancake router address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoinmapDex.sol\":\"CoinmapDex\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/CoinmapDex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport './interfaces/ISwapRouter.sol';\\n\\ncontract CoinmapDex is EIP712, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    enum OrderStatus {OPEN, FILLED, CANCELED}\\n\\n    struct Order {\\n        address maker;\\n        address payToken;\\n        address buyToken;\\n        uint256 payAmount;\\n        uint256 buyAmount;\\n        uint256 deadline;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 public constant ORDER_TYPEHASH = keccak256(\\n        'Order(address maker,address payToken,address buyToken,uint256 payAmount,uint256 buyAmount,uint256 deadline,bytes32 salt)'\\n    );\\n\\n    ISwapRouter public swapRouter;\\n    address public feeTo;\\n    uint256 public feeRate;\\n\\n    mapping(address => mapping(bytes32 => bool)) public makerSaltUsed;\\n\\n    event UpdateStatus(address indexed maker, bytes32 salt, OrderStatus status);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _swapRouter: pancake router address\\n     * @param _feeTo: address to collect fee\\n     * @param _feeRate: fee rate (100 = 1%, 500 = 5%, 5 = 0.05%)\\n     */\\n    constructor(\\n        ISwapRouter _swapRouter,\\n        address _feeTo,\\n        uint256 _feeRate\\n    ) public EIP712('CoinmapDex', '1') {\\n        swapRouter = _swapRouter;\\n        feeTo = _feeTo;\\n        feeRate = _feeRate;\\n    }\\n\\n    function hashOrder(Order memory order) public pure returns (bytes32) {\\n        return keccak256(abi.encode(ORDER_TYPEHASH, order));\\n    }\\n\\n    function verify(\\n        address signer,\\n        Order memory order,\\n        bytes memory signature\\n    ) public view returns (bool) {\\n        bytes32 digest = _hashTypedDataV4(hashOrder(order));\\n        return signer == ECDSA.recover(digest, signature);\\n    }\\n\\n    function executeOrder(\\n        address signer,\\n        Order memory order,\\n        bytes memory signature,\\n        address[] memory paths,\\n        address[] memory feePaths\\n    ) external {\\n        require(!makerSaltUsed[order.maker][order.salt], 'CMD001');\\n        require(isValidSigner(order.maker, signer), 'CMD002');\\n        require(verify(signer, order, signature), 'CMD003');\\n        require(paths[0] == order.payToken, 'CMD004');\\n        require(paths[paths.length - 1] == order.buyToken, 'CMD005');\\n\\n        uint256 payAmount = swapRouter.getAmountsIn(order.buyAmount, paths)[0];\\n        uint256 feeAmount = payAmount.mul(feeRate).div(10000);\\n        require(payAmount.add(feeAmount) <= order.payAmount, 'CMD006');\\n        IERC20(paths[0]).safeTransferFrom(order.maker, address(this), payAmount.add(feeAmount));\\n        IERC20(paths[0]).approve(address(swapRouter), payAmount.add(feeAmount));\\n        uint256[] memory amounts = swapRouter.swapTokensForExactTokens(\\n            order.buyAmount,\\n            order.payAmount,\\n            paths,\\n            order.maker,\\n            order.deadline\\n        );\\n        require(amounts[amounts.length - 1] >= order.buyAmount, 'CMD007');\\n\\n        if (feePaths.length > 1) {\\n            require(feePaths[0] == order.payToken, 'CMD008');\\n            swapRouter.swapExactTokensForTokens(feeAmount, 0, feePaths, feeTo, order.deadline);\\n        } else {\\n            IERC20(paths[0]).safeTransfer(feeTo, feeAmount);\\n        }\\n\\n        makerSaltUsed[order.maker][order.salt] = true;\\n        emit UpdateStatus(order.maker, order.salt, OrderStatus.FILLED);\\n    }\\n\\n    function cancelOrder(address maker, bytes32 salt) external {\\n        require(!makerSaltUsed[maker][salt], 'CMD001');\\n        require(isValidSigner(maker, msg.sender), 'CMD002');\\n        makerSaltUsed[maker][salt] = true;\\n        emit UpdateStatus(maker, salt, OrderStatus.CANCELED);\\n    }\\n\\n    function isValidSigner(address maker, address signer) public pure returns (bool) {\\n        return signer == maker;\\n    }\\n\\n    function setFeeTo(address _feeTo) public onlyOwner {\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeRate(uint256 _feeRate) public onlyOwner {\\n        feeRate = _feeRate;\\n    }\\n\\n    function onCriticalBug(address _feeTo) public onlyOwner {\\n        address payable addr = payable(_feeTo);\\n        selfdestruct(addr);\\n    }\\n}\\n\",\"keccak256\":\"0x0d46c521acfefae6f884cc3d6fc05d9a1d9d55d1573f1be6d6e275e5ca9abeab\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface ISwapRouter {\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x819697071828cbd8e2b2dfd8b0a1cfb2eb67e9a727f552e44ab20bc34051b751\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001e4a38038062001e4a83398101604081905262000035916200019c565b604080518082018252600a815269086ded2dcdac2e088caf60b31b60208083019182528351808501855260018152603160f81b908201529151902060c08181527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660e08190524660a081815286517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818901969096526060810193909352608080840192909252308382015286518084039091018152919092019094528351939092019290922090526101005262000113336200014c565b600180546001600160a01b039485166001600160a01b0319918216179091556002805493909416921691909117909155600355620001fc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060608486031215620001b1578283fd5b8351620001be81620001e3565b6020850151909350620001d181620001e3565b80925050604084015190509250925092565b6001600160a01b0381168114620001f957600080fd5b50565b60805160a05160c05160e05161010051611c09620002416000396000610ff9015260006110480152600061102301526000610fa701526000610fd00152611c096000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063978bbdb911610097578063e4c1141811610066578063e4c1141814610236578063f2fde38b14610249578063f46901ed1461025c578063f973a2091461026f57600080fd5b8063978bbdb9146101cb578063adaef2d9146101e2578063b1d34b7314610210578063c31c9c071461022357600080fd5b80636f71fd32116100d35780636f71fd321461018c578063715018a61461019f57806384b2167c146101a75780638da5cb5b146101ba57600080fd5b8063017e7e5814610105578063158e9e851461013557806342e6e29a1461014a57806345596e2e14610179575b600080fd5b600254610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014861014336600461172e565b610295565b005b610169610158366004611748565b6001600160a01b0391821691161490565b604051901515815260200161012c565b61014861018736600461197b565b6102d5565b61014861019a366004611802565b610304565b610148610a28565b6101486101b536600461177a565b610a5e565b6000546001600160a01b0316610118565b6101d460035481565b60405190815260200161012c565b6101696101f036600461177a565b600460209081526000928352604080842090915290825290205460ff1681565b6101d461021e366004611960565b610b69565b600154610118906001600160a01b031681565b6101696102443660046117a3565b610c19565b61014861025736600461172e565b610c58565b61014861026a36600461172e565b610cf3565b6101d47ede0ef3ff623a8dac775d5c19cf58827378e2e8d3cf04efbc871b4568b32f7681565b6000546001600160a01b031633146102c85760405162461bcd60e51b81526004016102bf90611a57565b60405180910390fd5b806001600160a01b038116ff5b6000546001600160a01b031633146102ff5760405162461bcd60e51b81526004016102bf90611a57565b600355565b83516001600160a01b0316600090815260046020908152604080832060c0880151845290915290205460ff16156103665760405162461bcd60e51b8152602060048201526006602482015265434d4430303160d01b60448201526064016102bf565b83516001600160a01b038087169116146103ab5760405162461bcd60e51b815260206004820152600660248201526521a6a218181960d11b60448201526064016102bf565b6103b6858585610c19565b6103eb5760405162461bcd60e51b8152602060048201526006602482015265434d4430303360d01b60448201526064016102bf565b83602001516001600160a01b03168260008151811061041a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146104615760405162461bcd60e51b815260206004820152600660248201526510d3510c0c0d60d21b60448201526064016102bf565b83604001516001600160a01b0316826001845161047e9190611b8d565b8151811061049c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146104e35760405162461bcd60e51b8152602060048201526006602482015265434d4430303560d01b60448201526064016102bf565b60015460808501516040516307c0329d60e21b81526000926001600160a01b031691631f00ca749161051a91908790600401611a8c565b60006040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056e91908101906118ad565b60008151811061058e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006105bb6127106105b560035485610d3f90919063ffffffff16565b90610d4b565b60608701519091506105cd8383610d57565b11156106045760405162461bcd60e51b815260206004820152600660248201526521a6a218181b60d11b60448201526064016102bf565b855161065790306106158585610d57565b8760008151811061063657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316610d63909392919063ffffffff16565b8360008151811061067857634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001546001600160a01b039182169163095ea7b391166106a38585610d57565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107219190611940565b5060015460808701516060880151885160a08a0151604051634401edf760e11b81526000956001600160a01b031694638803dbee9461076a94919390928c929190600401611aa5565b600060405180830381600087803b15801561078457600080fd5b505af1158015610798573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c091908101906118ad565b9050866080015181600183516107d69190611b8d565b815181106107f457634e487b7160e01b600052603260045260246000fd5b602002602001015110156108335760405162461bcd60e51b8152602060048201526006602482015265434d4430303760d01b60448201526064016102bf565b60018451111561094f5786602001516001600160a01b03168460008151811061086c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146108b35760405162461bcd60e51b81526020600482015260066024820152650869a886060760d31b60448201526064016102bf565b60015460025460a08901516040516338ed173960e01b81526001600160a01b03938416936338ed1739936108f39388936000938c93169190600401611aa5565b600060405180830381600087803b15801561090d57600080fd5b505af1158015610921573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094991908101906118ad565b506109a3565b60025485516109a3916001600160a01b0316908490889060009061098357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316610dd49092919063ffffffff16565b86516001600160a01b03908116600090815260046020908152604080832060c08c0180518552925291829020805460ff191660019081179091558a519151925191909316927fed7cb6c9f6327abadac804e7b7c0033ad1ed0f4e1b259ff20ee6499ea527ab1492610a16929091906119f2565b60405180910390a25050505050505050565b6000546001600160a01b03163314610a525760405162461bcd60e51b81526004016102bf90611a57565b610a5c6000610e09565b565b6001600160a01b038216600090815260046020908152604080832084845290915290205460ff1615610abb5760405162461bcd60e51b8152602060048201526006602482015265434d4430303160d01b60448201526064016102bf565b6001600160a01b0382163314610afc5760405162461bcd60e51b815260206004820152600660248201526521a6a218181960d11b60448201526064016102bf565b6001600160a01b038216600081815260046020908152604080832085845290915290819020805460ff19166001179055517fed7cb6c9f6327abadac804e7b7c0033ad1ed0f4e1b259ff20ee6499ea527ab1490610b5d9084906002906119f2565b60405180910390a25050565b60007ede0ef3ff623a8dac775d5c19cf58827378e2e8d3cf04efbc871b4568b32f7682604051602001610bfc92919060006101008201905083825260018060a01b038084511660208401528060208501511660408401528060408501511660608401525060608301516080830152608083015160a083015260a083015160c083015260c083015160e08301529392505050565b604051602081830303815290604052805190602001209050919050565b600080610c2d610c2885610b69565b610e59565b9050610c398184610ead565b6001600160a01b0316856001600160a01b0316149150505b9392505050565b6000546001600160a01b03163314610c825760405162461bcd60e51b81526004016102bf90611a57565b6001600160a01b038116610ce75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bf565b610cf081610e09565b50565b6000546001600160a01b03163314610d1d5760405162461bcd60e51b81526004016102bf90611a57565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610c518284611b6e565b6000610c518284611b4e565b6000610c518284611b36565b6040516001600160a01b0380851660248301528316604482015260648101829052610dce9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610ed1565b50505050565b6040516001600160a01b038316602482015260448101829052610e0490849063a9059cbb60e01b90606401610d97565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610ea7610e66610fa3565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610ebc8585611096565b91509150610ec981611106565b509392505050565b6000610f26826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113079092919063ffffffff16565b805190915015610e045780806020019051810190610f449190611940565b610e045760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102bf565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610ff257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156110cd5760208301516040840151606085015160001a6110c18782858561131e565b945094505050506110ff565b8251604014156110f757602083015160408401516110ec86838361140b565b9350935050506110ff565b506000905060025b9250929050565b600081600481111561112857634e487b7160e01b600052602160045260246000fd5b14156111315750565b600181600481111561115357634e487b7160e01b600052602160045260246000fd5b14156111a15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102bf565b60028160048111156111c357634e487b7160e01b600052602160045260246000fd5b14156112115760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102bf565b600381600481111561123357634e487b7160e01b600052602160045260246000fd5b141561128c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102bf565b60048160048111156112ae57634e487b7160e01b600052602160045260246000fd5b1415610cf05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016102bf565b6060611316848460008561143a565b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156113555750600090506003611402565b8460ff16601b1415801561136d57508460ff16601c14155b1561137e5750600090506004611402565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156113d2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113fb57600060019250925050611402565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161142c8782888561131e565b935093505050935093915050565b60608247101561149b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102bf565b843b6114e95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102bf565b600080866001600160a01b0316858760405161150591906119d6565b60006040518083038185875af1925050503d8060008114611542576040519150601f19603f3d011682016040523d82523d6000602084013e611547565b606091505b5091509150611557828286611562565b979650505050505050565b60608315611571575081610c51565b8251156115815782518084602001fd5b8160405162461bcd60e51b81526004016102bf9190611a24565b80356001600160a01b03811681146115b257600080fd5b919050565b600082601f8301126115c7578081fd5b813560206115dc6115d783611b12565b611ae1565b80838252828201915082860187848660051b89010111156115fb578586fd5b855b858110156116205761160e8261159b565b845292840192908401906001016115fd565b5090979650505050505050565b600082601f83011261163d578081fd5b813567ffffffffffffffff81111561165757611657611be6565b61166a601f8201601f1916602001611ae1565b81815284602083860101111561167e578283fd5b816020850160208301379081016020019190915292915050565b600060e082840312156116a9578081fd5b60405160e0810181811067ffffffffffffffff821117156116cc576116cc611be6565b6040529050806116db8361159b565b81526116e96020840161159b565b60208201526116fa6040840161159b565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201525092915050565b60006020828403121561173f578081fd5b610c518261159b565b6000806040838503121561175a578081fd5b6117638361159b565b91506117716020840161159b565b90509250929050565b6000806040838503121561178c578182fd5b6117958361159b565b946020939093013593505050565b600080600061012084860312156117b8578081fd5b6117c18461159b565b92506117d08560208601611698565b915061010084013567ffffffffffffffff8111156117ec578182fd5b6117f88682870161162d565b9150509250925092565b6000806000806000610160868803121561181a578081fd5b6118238661159b565b94506118328760208801611698565b935061010086013567ffffffffffffffff8082111561184f578283fd5b61185b89838a0161162d565b9450610120880135915080821115611871578283fd5b61187d89838a016115b7565b9350610140880135915080821115611893578283fd5b506118a0888289016115b7565b9150509295509295909350565b600060208083850312156118bf578182fd5b825167ffffffffffffffff8111156118d5578283fd5b8301601f810185136118e5578283fd5b80516118f36115d782611b12565b80828252848201915084840188868560051b8701011115611912578687fd5b8694505b83851015611934578051835260019490940193918501918501611916565b50979650505050505050565b600060208284031215611951578081fd5b81518015158114610c51578182fd5b600060e08284031215611971578081fd5b610c518383611698565b60006020828403121561198c578081fd5b5035919050565b6000815180845260208085019450808401835b838110156119cb5781516001600160a01b0316875295820195908201906001016119a6565b509495945050505050565b600082516119e8818460208701611ba4565b9190910192915050565b8281526040810160038310611a1757634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6020815260008251806020840152611a43816040850160208701611ba4565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8281526040602082015260006113166040830184611993565b85815284602082015260a060408201526000611ac460a0830186611993565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b0a57611b0a611be6565b604052919050565b600067ffffffffffffffff821115611b2c57611b2c611be6565b5060051b60200190565b60008219821115611b4957611b49611bd0565b500190565b600082611b6957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611b8857611b88611bd0565b500290565b600082821015611b9f57611b9f611bd0565b500390565b60005b83811015611bbf578181015183820152602001611ba7565b83811115610dce5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063978bbdb911610097578063e4c1141811610066578063e4c1141814610236578063f2fde38b14610249578063f46901ed1461025c578063f973a2091461026f57600080fd5b8063978bbdb9146101cb578063adaef2d9146101e2578063b1d34b7314610210578063c31c9c071461022357600080fd5b80636f71fd32116100d35780636f71fd321461018c578063715018a61461019f57806384b2167c146101a75780638da5cb5b146101ba57600080fd5b8063017e7e5814610105578063158e9e851461013557806342e6e29a1461014a57806345596e2e14610179575b600080fd5b600254610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014861014336600461172e565b610295565b005b610169610158366004611748565b6001600160a01b0391821691161490565b604051901515815260200161012c565b61014861018736600461197b565b6102d5565b61014861019a366004611802565b610304565b610148610a28565b6101486101b536600461177a565b610a5e565b6000546001600160a01b0316610118565b6101d460035481565b60405190815260200161012c565b6101696101f036600461177a565b600460209081526000928352604080842090915290825290205460ff1681565b6101d461021e366004611960565b610b69565b600154610118906001600160a01b031681565b6101696102443660046117a3565b610c19565b61014861025736600461172e565b610c58565b61014861026a36600461172e565b610cf3565b6101d47ede0ef3ff623a8dac775d5c19cf58827378e2e8d3cf04efbc871b4568b32f7681565b6000546001600160a01b031633146102c85760405162461bcd60e51b81526004016102bf90611a57565b60405180910390fd5b806001600160a01b038116ff5b6000546001600160a01b031633146102ff5760405162461bcd60e51b81526004016102bf90611a57565b600355565b83516001600160a01b0316600090815260046020908152604080832060c0880151845290915290205460ff16156103665760405162461bcd60e51b8152602060048201526006602482015265434d4430303160d01b60448201526064016102bf565b83516001600160a01b038087169116146103ab5760405162461bcd60e51b815260206004820152600660248201526521a6a218181960d11b60448201526064016102bf565b6103b6858585610c19565b6103eb5760405162461bcd60e51b8152602060048201526006602482015265434d4430303360d01b60448201526064016102bf565b83602001516001600160a01b03168260008151811061041a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146104615760405162461bcd60e51b815260206004820152600660248201526510d3510c0c0d60d21b60448201526064016102bf565b83604001516001600160a01b0316826001845161047e9190611b8d565b8151811061049c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146104e35760405162461bcd60e51b8152602060048201526006602482015265434d4430303560d01b60448201526064016102bf565b60015460808501516040516307c0329d60e21b81526000926001600160a01b031691631f00ca749161051a91908790600401611a8c565b60006040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056e91908101906118ad565b60008151811061058e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006105bb6127106105b560035485610d3f90919063ffffffff16565b90610d4b565b60608701519091506105cd8383610d57565b11156106045760405162461bcd60e51b815260206004820152600660248201526521a6a218181b60d11b60448201526064016102bf565b855161065790306106158585610d57565b8760008151811061063657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316610d63909392919063ffffffff16565b8360008151811061067857634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001546001600160a01b039182169163095ea7b391166106a38585610d57565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107219190611940565b5060015460808701516060880151885160a08a0151604051634401edf760e11b81526000956001600160a01b031694638803dbee9461076a94919390928c929190600401611aa5565b600060405180830381600087803b15801561078457600080fd5b505af1158015610798573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c091908101906118ad565b9050866080015181600183516107d69190611b8d565b815181106107f457634e487b7160e01b600052603260045260246000fd5b602002602001015110156108335760405162461bcd60e51b8152602060048201526006602482015265434d4430303760d01b60448201526064016102bf565b60018451111561094f5786602001516001600160a01b03168460008151811061086c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146108b35760405162461bcd60e51b81526020600482015260066024820152650869a886060760d31b60448201526064016102bf565b60015460025460a08901516040516338ed173960e01b81526001600160a01b03938416936338ed1739936108f39388936000938c93169190600401611aa5565b600060405180830381600087803b15801561090d57600080fd5b505af1158015610921573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094991908101906118ad565b506109a3565b60025485516109a3916001600160a01b0316908490889060009061098357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316610dd49092919063ffffffff16565b86516001600160a01b03908116600090815260046020908152604080832060c08c0180518552925291829020805460ff191660019081179091558a519151925191909316927fed7cb6c9f6327abadac804e7b7c0033ad1ed0f4e1b259ff20ee6499ea527ab1492610a16929091906119f2565b60405180910390a25050505050505050565b6000546001600160a01b03163314610a525760405162461bcd60e51b81526004016102bf90611a57565b610a5c6000610e09565b565b6001600160a01b038216600090815260046020908152604080832084845290915290205460ff1615610abb5760405162461bcd60e51b8152602060048201526006602482015265434d4430303160d01b60448201526064016102bf565b6001600160a01b0382163314610afc5760405162461bcd60e51b815260206004820152600660248201526521a6a218181960d11b60448201526064016102bf565b6001600160a01b038216600081815260046020908152604080832085845290915290819020805460ff19166001179055517fed7cb6c9f6327abadac804e7b7c0033ad1ed0f4e1b259ff20ee6499ea527ab1490610b5d9084906002906119f2565b60405180910390a25050565b60007ede0ef3ff623a8dac775d5c19cf58827378e2e8d3cf04efbc871b4568b32f7682604051602001610bfc92919060006101008201905083825260018060a01b038084511660208401528060208501511660408401528060408501511660608401525060608301516080830152608083015160a083015260a083015160c083015260c083015160e08301529392505050565b604051602081830303815290604052805190602001209050919050565b600080610c2d610c2885610b69565b610e59565b9050610c398184610ead565b6001600160a01b0316856001600160a01b0316149150505b9392505050565b6000546001600160a01b03163314610c825760405162461bcd60e51b81526004016102bf90611a57565b6001600160a01b038116610ce75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bf565b610cf081610e09565b50565b6000546001600160a01b03163314610d1d5760405162461bcd60e51b81526004016102bf90611a57565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610c518284611b6e565b6000610c518284611b4e565b6000610c518284611b36565b6040516001600160a01b0380851660248301528316604482015260648101829052610dce9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610ed1565b50505050565b6040516001600160a01b038316602482015260448101829052610e0490849063a9059cbb60e01b90606401610d97565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610ea7610e66610fa3565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610ebc8585611096565b91509150610ec981611106565b509392505050565b6000610f26826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113079092919063ffffffff16565b805190915015610e045780806020019051810190610f449190611940565b610e045760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102bf565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610ff257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156110cd5760208301516040840151606085015160001a6110c18782858561131e565b945094505050506110ff565b8251604014156110f757602083015160408401516110ec86838361140b565b9350935050506110ff565b506000905060025b9250929050565b600081600481111561112857634e487b7160e01b600052602160045260246000fd5b14156111315750565b600181600481111561115357634e487b7160e01b600052602160045260246000fd5b14156111a15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102bf565b60028160048111156111c357634e487b7160e01b600052602160045260246000fd5b14156112115760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102bf565b600381600481111561123357634e487b7160e01b600052602160045260246000fd5b141561128c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102bf565b60048160048111156112ae57634e487b7160e01b600052602160045260246000fd5b1415610cf05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016102bf565b6060611316848460008561143a565b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156113555750600090506003611402565b8460ff16601b1415801561136d57508460ff16601c14155b1561137e5750600090506004611402565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156113d2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113fb57600060019250925050611402565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161142c8782888561131e565b935093505050935093915050565b60608247101561149b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102bf565b843b6114e95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102bf565b600080866001600160a01b0316858760405161150591906119d6565b60006040518083038185875af1925050503d8060008114611542576040519150601f19603f3d011682016040523d82523d6000602084013e611547565b606091505b5091509150611557828286611562565b979650505050505050565b60608315611571575081610c51565b8251156115815782518084602001fd5b8160405162461bcd60e51b81526004016102bf9190611a24565b80356001600160a01b03811681146115b257600080fd5b919050565b600082601f8301126115c7578081fd5b813560206115dc6115d783611b12565b611ae1565b80838252828201915082860187848660051b89010111156115fb578586fd5b855b858110156116205761160e8261159b565b845292840192908401906001016115fd565b5090979650505050505050565b600082601f83011261163d578081fd5b813567ffffffffffffffff81111561165757611657611be6565b61166a601f8201601f1916602001611ae1565b81815284602083860101111561167e578283fd5b816020850160208301379081016020019190915292915050565b600060e082840312156116a9578081fd5b60405160e0810181811067ffffffffffffffff821117156116cc576116cc611be6565b6040529050806116db8361159b565b81526116e96020840161159b565b60208201526116fa6040840161159b565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201525092915050565b60006020828403121561173f578081fd5b610c518261159b565b6000806040838503121561175a578081fd5b6117638361159b565b91506117716020840161159b565b90509250929050565b6000806040838503121561178c578182fd5b6117958361159b565b946020939093013593505050565b600080600061012084860312156117b8578081fd5b6117c18461159b565b92506117d08560208601611698565b915061010084013567ffffffffffffffff8111156117ec578182fd5b6117f88682870161162d565b9150509250925092565b6000806000806000610160868803121561181a578081fd5b6118238661159b565b94506118328760208801611698565b935061010086013567ffffffffffffffff8082111561184f578283fd5b61185b89838a0161162d565b9450610120880135915080821115611871578283fd5b61187d89838a016115b7565b9350610140880135915080821115611893578283fd5b506118a0888289016115b7565b9150509295509295909350565b600060208083850312156118bf578182fd5b825167ffffffffffffffff8111156118d5578283fd5b8301601f810185136118e5578283fd5b80516118f36115d782611b12565b80828252848201915084840188868560051b8701011115611912578687fd5b8694505b83851015611934578051835260019490940193918501918501611916565b50979650505050505050565b600060208284031215611951578081fd5b81518015158114610c51578182fd5b600060e08284031215611971578081fd5b610c518383611698565b60006020828403121561198c578081fd5b5035919050565b6000815180845260208085019450808401835b838110156119cb5781516001600160a01b0316875295820195908201906001016119a6565b509495945050505050565b600082516119e8818460208701611ba4565b9190910192915050565b8281526040810160038310611a1757634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6020815260008251806020840152611a43816040850160208701611ba4565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8281526040602082015260006113166040830184611993565b85815284602082015260a060408201526000611ac460a0830186611993565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b0a57611b0a611be6565b604052919050565b600067ffffffffffffffff821115611b2c57611b2c611be6565b5060051b60200190565b60008219821115611b4957611b49611bd0565b500190565b600082611b6957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611b8857611b88611bd0565b500290565b600082821015611b9f57611b9f611bd0565b500390565b60005b83811015611bbf578181015183820152602001611ba7565b83811115610dce5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_feeRate": ": fee rate (100 = 1%, 500 = 5%, 5 = 0.05%)",
          "_feeTo": ": address to collect fee",
          "_swapRouter": ": pancake router address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CoinmapDex.sol:CoinmapDex",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1587,
        "contract": "contracts/CoinmapDex.sol:CoinmapDex",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISwapRouter)2063"
      },
      {
        "astId": 1589,
        "contract": "contracts/CoinmapDex.sol:CoinmapDex",
        "label": "feeTo",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1591,
        "contract": "contracts/CoinmapDex.sol:CoinmapDex",
        "label": "feeRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1597,
        "contract": "contracts/CoinmapDex.sol:CoinmapDex",
        "label": "makerSaltUsed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwapRouter)2063": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}